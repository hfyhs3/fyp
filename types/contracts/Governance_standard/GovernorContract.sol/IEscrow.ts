/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IEscrowInterface extends utils.Interface {
  functions: {
    "approveCampaign(uint256)": FunctionFragment;
    "createCampaign(address,uint256,uint256)": FunctionFragment;
    "rejectCampaign(uint256)": FunctionFragment;
    "releaseMilestone(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveCampaign"
      | "createCampaign"
      | "rejectCampaign"
      | "releaseMilestone"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseMilestone",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseMilestone",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveCampaign(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createCampaign(
      beneficiary: string,
      totalAmount: BigNumberish,
      milestoneCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rejectCampaign(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    releaseMilestone(
      campaignId: BigNumberish,
      milestoneIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  approveCampaign(
    campaignId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createCampaign(
    beneficiary: string,
    totalAmount: BigNumberish,
    milestoneCount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rejectCampaign(
    campaignId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  releaseMilestone(
    campaignId: BigNumberish,
    milestoneIndex: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveCampaign(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createCampaign(
      beneficiary: string,
      totalAmount: BigNumberish,
      milestoneCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectCampaign(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseMilestone(
      campaignId: BigNumberish,
      milestoneIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    approveCampaign(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createCampaign(
      beneficiary: string,
      totalAmount: BigNumberish,
      milestoneCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rejectCampaign(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    releaseMilestone(
      campaignId: BigNumberish,
      milestoneIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveCampaign(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createCampaign(
      beneficiary: string,
      totalAmount: BigNumberish,
      milestoneCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rejectCampaign(
      campaignId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    releaseMilestone(
      campaignId: BigNumberish,
      milestoneIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
