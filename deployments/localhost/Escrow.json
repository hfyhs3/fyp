{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_daoAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_escAccount",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "CampaignCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Escrow.CampaignStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "CampaignStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "ContributionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "milestoneIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Escrow.MilestoneStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "MilestoneUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundAmt",
          "type": "uint256"
        }
      ],
      "name": "RefundIssued",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "approveCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_milestoneIndex",
          "type": "uint256"
        }
      ],
      "name": "calculateTotalContributionsForMilestone",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "campaignContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "campaigns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum Escrow.CampaignStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "contributeToCampaign",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_milestoneCount",
          "type": "uint256"
        }
      ],
      "name": "createCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "refundContributors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "rejectCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_milestoneIndex",
          "type": "uint256"
        }
      ],
      "name": "releaseMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoAddress",
          "type": "address"
        }
      ],
      "name": "setDAOAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f11280ced2d3e12784d280414f673de197455665200e94a62b146605a70ebc8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1175229",
    "logsBloom": "0x
    "blockHash": "0xbb9599316df4bea1df3e724275336306e555a1914325a44a3bb8f1a3450873cc",
    "transactionHash": "0x6f11280ced2d3e12784d280414f673de197455665200e94a62b146605a70ebc8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x6f11280ced2d3e12784d280414f673de197455665200e94a62b146605a70ebc8",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbb9599316df4bea1df3e724275336306e555a1914325a44a3bb8f1a3450873cc"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x6f11280ced2d3e12784d280414f673de197455665200e94a62b146605a70ebc8",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xbb9599316df4bea1df3e724275336306e555a1914325a44a3bb8f1a3450873cc"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "1175229",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8"
  ],
  "numDeployments": 1,
  "solcInputHash": "2c4f2dd149da569e7a2abc3919e270f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escAccount\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Escrow.CampaignStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"CampaignStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"milestoneIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Escrow.MilestoneStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"MilestoneUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmt\",\"type\":\"uint256\"}],\"name\":\"RefundIssued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"approveCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneIndex\",\"type\":\"uint256\"}],\"name\":\"calculateTotalContributionsForMilestone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"campaignContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Escrow.CampaignStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"contributeToCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneCount\",\"type\":\"uint256\"}],\"name\":\"createCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"refundContributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"rejectCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneIndex\",\"type\":\"uint256\"}],\"name\":\"releaseMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoAddress\",\"type\":\"address\"}],\"name\":\"setDAOAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Escrow is Ownable {\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _campaignIdCounter;\\r\\n\\r\\n    Counters.Counter private _itemIdCounter;\\r\\n    // enum Available {NO, YES}\\r\\n    enum CampaignStatus {\\r\\n        PENDING,\\r\\n        ACTIVE,\\r\\n        COMPLETED,\\r\\n        REJECTED\\r\\n    }\\r\\n\\r\\n    enum MilestoneStatus {\\r\\n        PENDING,\\r\\n        RELEASED,\\r\\n        REFUNDED\\r\\n    }\\r\\n\\r\\n    struct Milestone{\\r\\n        uint amount;\\r\\n        MilestoneStatus status;\\r\\n    }\\r\\n\\r\\n    struct Campaign {\\r\\n        uint id;\\r\\n        address beneficiary;\\r\\n        uint totalAmount;\\r\\n        CampaignStatus status;\\r\\n        Milestone[] milestones;\\r\\n        mapping(address => uint) contributions;\\r\\n    }\\r\\n\\r\\n    address public escAccount;\\r\\n    address public daoAddress;\\r\\n\\r\\n    mapping(uint => Campaign) public campaigns;\\r\\n\\r\\n    mapping(uint => mapping(address => uint)) public campaignContributions;\\r\\n    mapping(uint => address[]) private campaignContributors;\\r\\n\\r\\n\\r\\n    event CampaignCreated(uint indexed campaignId, address indexed beneficiary, uint totalAmount);\\r\\n    event CampaignStatusChanged(uint indexed campaignId, CampaignStatus status);\\r\\n    event MilestoneUpdated(uint indexed campaignId, uint milestoneIndex, MilestoneStatus status);\\r\\n    event ContributionReceived(address indexed contributor, uint amount, uint indexed campaignId);\\r\\n    event RefundIssued(uint id, address contributor, uint refundAmt);\\r\\n\\r\\n    constructor(address payable initialOwner, address _daoAddress, address _escAccount) Ownable() {\\r\\n        require(initialOwner != address(0), \\\"Initial owner cannot be the zero address\\\");\\r\\n        require(_escAccount != address(0), \\\"Escrow account cannot be the zero address\\\");\\r\\n        require(_daoAddress != address(0), \\\"DAO address cannot be the zero address.\\\");\\r\\n        transferOwnership(initialOwner);\\r\\n        daoAddress = _daoAddress;\\r\\n        escAccount = _escAccount;\\r\\n    }\\r\\n\\r\\n    modifier onlyEscrowDAO() {\\r\\n        require(msg.sender == daoAddress, \\\"Caller is not the DAO account\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setDAOAddress(address _daoAddress) external onlyOwner {\\r\\n        require(_daoAddress != address(0), \\\"DAO address cannot be the zero address\\\");\\r\\n        daoAddress = _daoAddress;\\r\\n    }\\r\\n\\r\\n    function createCampaign(address _beneficiary, uint _totalAmount, uint _milestoneCount) external onlyEscrowDAO{\\r\\n        require(_beneficiary != address(0), \\\"Beneficiary cannot be the zero address.\\\");\\r\\n        require(_totalAmount > 0, \\\"Total amount must be greater than zero.\\\");\\r\\n        require(_milestoneCount > 0, \\\"At least one milestone required.\\\");\\r\\n\\r\\n        _campaignIdCounter.increment();\\r\\n        uint newCampaignId = _campaignIdCounter.current();\\r\\n\\r\\n        Campaign storage newCampaign = campaigns[newCampaignId];\\r\\n        newCampaign.id = newCampaignId;\\r\\n        newCampaign.beneficiary = _beneficiary;\\r\\n        newCampaign.totalAmount = _totalAmount;\\r\\n        newCampaign.status = CampaignStatus.PENDING;\\r\\n\\r\\n        for (uint i = 0; i < _milestoneCount; i++) {\\r\\n            newCampaign.milestones.push(Milestone( _totalAmount / _milestoneCount, MilestoneStatus.PENDING ));\\r\\n        }\\r\\n\\r\\n        emit CampaignCreated(newCampaignId, _beneficiary, _totalAmount);\\r\\n\\r\\n    }\\r\\n\\r\\n    function approveCampaign(uint _campaignId) external onlyEscrowDAO {\\r\\n        Campaign storage campaign = campaigns[_campaignId];\\r\\n\\r\\n        require(campaign.status == CampaignStatus.PENDING, \\\"Campaign must be pending approval.\\\");\\r\\n        campaign.status = CampaignStatus.ACTIVE;\\r\\n        emit CampaignStatusChanged(_campaignId, CampaignStatus.ACTIVE);\\r\\n    }\\r\\n\\r\\n    function rejectCampaign(uint _campaignId) external onlyEscrowDAO {\\r\\n        Campaign storage campaign = campaigns[_campaignId];\\r\\n        require(campaign.status == CampaignStatus.PENDING, \\\"Campaign must be pending approval.\\\");\\r\\n\\r\\n        campaign.status = CampaignStatus.REJECTED;\\r\\n        emit CampaignStatusChanged(_campaignId, CampaignStatus.REJECTED);\\r\\n\\r\\n\\r\\n        //MANAGE REFUNDS IF ANY MADE IF CAMPAIGN WAS APPROVED THEN REJECTED LATER\\r\\n    }\\r\\n\\r\\n    function contributeToCampaign(uint _campaignId) public payable {\\r\\n        Campaign storage campaign = campaigns[_campaignId];\\r\\n        require(campaign.status == CampaignStatus.ACTIVE, \\\"Campaign must be active.\\\");\\r\\n        require(msg.value > 0, \\\"Contribution must be greater than zero.\\\");\\r\\n\\r\\n        campaign.contributions[msg.sender] += msg.value;\\r\\n        emit ContributionReceived(msg.sender, msg.value, _campaignId);\\r\\n    }\\r\\n\\r\\n    function releaseMilestone(uint _campaignId, uint _milestoneIndex) external onlyEscrowDAO {\\r\\n        Campaign storage campaign = campaigns[_campaignId];\\r\\n        require(campaign.status == CampaignStatus.ACTIVE, \\\"Campaign must be active.\\\");\\r\\n        Milestone storage milestone = campaign.milestones[_milestoneIndex];\\r\\n        require(milestone.status == MilestoneStatus.PENDING, \\\"Milestone must be pending.\\\");\\r\\n\\r\\n        payable(campaign.beneficiary).transfer(milestone.amount);\\r\\n\\r\\n        milestone.status = MilestoneStatus.RELEASED;\\r\\n        emit MilestoneUpdated(_campaignId, _milestoneIndex, MilestoneStatus.RELEASED);\\r\\n\\r\\n        bool allMilestonesReleased = true;\\r\\n        for (uint i = 0; i < campaign.milestones.length; i++) {\\r\\n            if (campaign.milestones[i].status != MilestoneStatus.RELEASED) {\\r\\n                allMilestonesReleased = false;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (allMilestonesReleased) {\\r\\n            campaign.status = CampaignStatus.COMPLETED;\\r\\n            emit CampaignStatusChanged(_campaignId, CampaignStatus.COMPLETED);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function refundContributors(uint _campaignId) public onlyEscrowDAO {\\r\\n        Campaign storage campaign = campaigns[_campaignId];\\r\\n        require(campaign.status == CampaignStatus.REJECTED || (campaign.status == CampaignStatus.COMPLETED && campaign.totalAmount > address(this).balance), \\\"Invalid campaign status for refund.\\\");        \\r\\n\\r\\n        address[] storage contributors = campaignContributors[_campaignId];\\r\\n\\r\\n        for (uint256 i = 0; i < contributors.length; i++) {\\r\\n            address contributor = contributors[i];\\r\\n            uint contribution = campaignContributions[_campaignId][contributor];\\r\\n            if (contribution > 0){\\r\\n                uint refundAmount = (contribution * 98) / 100; //2% flat rate deduction from the refund amount\\r\\n\\r\\n                campaignContributions[_campaignId][contributor] = 0; //resetting value to prevent re-entrancy attacks\\r\\n\\r\\n                (bool sent, ) = contributor.call{value:refundAmount}(\\\"\\\");\\r\\n                require(sent, \\\"failed to send refund\\\");\\r\\n\\r\\n                emit RefundIssued(_campaignId, contributor, refundAmount);\\r\\n\\r\\n\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (campaign.status != CampaignStatus.COMPLETED){\\r\\n            campaign.status = CampaignStatus.COMPLETED;\\r\\n            emit CampaignStatusChanged(_campaignId, CampaignStatus.COMPLETED);\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Utility function to get contributors list for a campaign\\r\\n    function calculateTotalContributionsForMilestone(uint _campaignId, uint _milestoneIndex) public view returns (uint256) { \\r\\n        Campaign storage campaign = campaigns[_campaignId]; \\r\\n        // MileStone storage milestone = campaign.milestones[_milestoneIndex];\\r\\n\\r\\n        uint256 totalContributionsForMilestone = 0; \\r\\n\\r\\n        for (uint i = 0; i < campaignContributors[_campaignId].length; i++) { \\r\\n            address contributor = campaignContributors[_campaignId][i];\\r\\n            totalContributionsForMilestone += campaign.contributions[contributor];\\r\\n        }\\r\\n        require(totalContributionsForMilestone >= campaign.milestones[_milestoneIndex].amount, \\\"Milestone not reached.\\\");\\r\\n        return totalContributionsForMilestone; \\r\\n    }\\r\\n}\",\"keccak256\":\"0x973a61534098c9439ee4358a4554edafb32c86118a0a3d514e8d19fe2ec63156\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001625380380620016258339810160408190526200003491620002ff565b6200003f33620001bc565b6001600160a01b038316620000ac5760405162461bcd60e51b815260206004820152602860248201527f496e697469616c206f776e65722063616e6e6f7420626520746865207a65726f604482015267206164647265737360c01b60648201526084015b60405180910390fd5b6001600160a01b038116620001165760405162461bcd60e51b815260206004820152602960248201527f457363726f77206163636f756e742063616e6e6f7420626520746865207a65726044820152686f206164647265737360b81b6064820152608401620000a3565b6001600160a01b0382166200017e5760405162461bcd60e51b815260206004820152602760248201527f44414f20616464726573732063616e6e6f7420626520746865207a65726f206160448201526632323932b9b99760c91b6064820152608401620000a3565b62000189836200020c565b600480546001600160a01b039384166001600160a01b031991821617909155600380549290931691161790555062000353565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620002166200028b565b6001600160a01b0381166200027d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000a3565b6200028881620001bc565b50565b6000546001600160a01b03163314620002e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000a3565b565b6001600160a01b03811681146200028857600080fd5b6000806000606084860312156200031557600080fd5b83516200032281620002e9565b60208501519093506200033581620002e9565b60408501519092506200034881620002e9565b809150509250925092565b6112c280620003636000396000f3fe6080604052600436106100c85760003560e01c8063715018a61161007a578063715018a6146102285780638da5cb5b1461023d5780639453fdc41461025b578063965afa891461027b578063dbaf09101461029b578063ee4e1b53146102bb578063f2fde38b146102db578063f44ceee7146102fb57600080fd5b8063034d09da146100cd5780630b7ef89b146100ef578063141961bc146101025780632131c68c1461016a57806322c59958146101a257806328928b90146101e8578063461b600414610208575b600080fd5b3480156100d957600080fd5b506100ed6100e8366004610fc9565b61031b565b005b6100ed6100fd366004610fc9565b6103cd565b34801561010e57600080fd5b5061015161011d366004610fc9565b600560205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169160ff1684565b604051610161949392919061100c565b60405180910390f35b34801561017657600080fd5b5060045461018a906001600160a01b031681565b6040516001600160a01b039091168152602001610161565b3480156101ae57600080fd5b506101da6101bd36600461105b565b600660209081526000928352604080842090915290825290205481565b604051908152602001610161565b3480156101f457600080fd5b5060035461018a906001600160a01b031681565b34801561021457600080fd5b506100ed610223366004611087565b6104d4565b34801561023457600080fd5b506100ed61074e565b34801561024957600080fd5b506000546001600160a01b031661018a565b34801561026757600080fd5b506101da6102763660046110ba565b610762565b34801561028757600080fd5b506100ed6102963660046110dc565b61086d565b3480156102a757600080fd5b506100ed6102b63660046110ba565b6108fc565b3480156102c757600080fd5b506100ed6102d6366004610fc9565b610b38565b3480156102e757600080fd5b506100ed6102f63660046110dc565b610bd8565b34801561030757600080fd5b506100ed610316366004610fc9565b610c51565b6004546001600160a01b0316331461034e5760405162461bcd60e51b8152600401610345906110fe565b60405180910390fd5b60008181526005602052604081209060038083015460ff169081111561037657610376610fe2565b146103935760405162461bcd60e51b815260040161034590611135565b6003818101805460ff191682179055604051839160008051602061126d833981519152916103c19190611177565b60405180910390a25050565b6000818152600560205260409020600160038083015460ff16908111156103f6576103f6610fe2565b146104135760405162461bcd60e51b815260040161034590611185565b600034116104735760405162461bcd60e51b815260206004820152602760248201527f436f6e747269627574696f6e206d75737420626520677265617465722074686160448201526637103d32b9379760c91b6064820152608401610345565b336000908152600582016020526040812080543492906104949084906111cd565b9091555050604051348152829033907fd2dff949d20e874cc6ba1dcefb840fb8cf6000a4197bfb69accfea5a32443ff59060200160405180910390a35050565b6004546001600160a01b031633146104fe5760405162461bcd60e51b8152600401610345906110fe565b6001600160a01b0383166105645760405162461bcd60e51b815260206004820152602760248201527f42656e65666963696172792063616e6e6f7420626520746865207a65726f206160448201526632323932b9b99760c91b6064820152608401610345565b600082116105c45760405162461bcd60e51b815260206004820152602760248201527f546f74616c20616d6f756e74206d75737420626520677265617465722074686160448201526637103d32b9379760c91b6064820152608401610345565b600081116106145760405162461bcd60e51b815260206004820181905260248201527f4174206c65617374206f6e65206d696c6573746f6e652072657175697265642e6044820152606401610345565b610622600180546001019055565b600061062d60015490565b60008181526005602052604081208281556001810180546001600160a01b0319166001600160a01b0389161790556002810186905560038101805460ff191690559192505b8381101561070257816004016040518060400160405280868861069591906111e0565b8152602001600090528154600181810184556000938452602093849020835160029384029091019081559383015184820180549495949193909260ff19909216919084908111156106e8576106e8610fe2565b0217905550505080806106fa90611202565b915050610672565b50846001600160a01b0316827f63e3678c8493a16f8ba43ae9e547231762ca04526dac2c388bd2c26d894018518660405161073f91815260200190565b60405180910390a35050505050565b610756610f1f565b6107606000610f79565b565b600082815260056020526040812081805b6000868152600760205260409020548110156107f35760008681526007602052604081208054839081106107a9576107a961121b565b60009182526020808320909101546001600160a01b0316808352600587019091526040909120549091506107dd90846111cd565b92505080806107eb90611202565b915050610773565b508160040184815481106108095761080961121b565b9060005260206000209060020201600001548110156108635760405162461bcd60e51b815260206004820152601660248201527526b4b632b9ba37b732903737ba103932b0b1b432b21760511b6044820152606401610345565b9150505b92915050565b610875610f1f565b6001600160a01b0381166108da5760405162461bcd60e51b815260206004820152602660248201527f44414f20616464726573732063616e6e6f7420626520746865207a65726f206160448201526564647265737360d01b6064820152608401610345565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146109265760405162461bcd60e51b8152600401610345906110fe565b6000828152600560205260409020600160038083015460ff169081111561094f5761094f610fe2565b1461096c5760405162461bcd60e51b815260040161034590611185565b60008160040183815481106109835761098361121b565b6000918252602082206002909102019150600182015460ff1660028111156109ad576109ad610fe2565b146109fa5760405162461bcd60e51b815260206004820152601a60248201527f4d696c6573746f6e65206d7573742062652070656e64696e672e0000000000006044820152606401610345565b600182015481546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610a37573d6000803e3d6000fd5b506001818101805460ff19168217905560405185917fbec752a593d8ddbe45792918310a70eaa90968426e352c981df882c16b81124c91610a79918791611231565b60405180910390a2600160005b6004840154811015610af0576001846004018281548110610aa957610aa961121b565b600091825260209091206002918202016001015460ff1690811115610ad057610ad0610fe2565b14610ade5760009150610af0565b80610ae881611202565b915050610a86565b508015610b315760038301805460ff19166002908117909155604051869160008051602061126d83398151915291610b289190611177565b60405180910390a25b5050505050565b6004546001600160a01b03163314610b625760405162461bcd60e51b8152600401610345906110fe565b60008181526005602052604081209060038083015460ff1690811115610b8a57610b8a610fe2565b14610ba75760405162461bcd60e51b815260040161034590611135565b60038101805460ff19166001908117909155604051839160008051602061126d833981519152916103c19190611177565b610be0610f1f565b6001600160a01b038116610c455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610345565b610c4e81610f79565b50565b6004546001600160a01b03163314610c7b5760405162461bcd60e51b8152600401610345906110fe565b600081815260056020526040902060038082015460ff1681811115610ca257610ca2610fe2565b1480610cd45750600260038083015460ff1690811115610cc457610cc4610fe2565b148015610cd45750478160020154115b610d2c5760405162461bcd60e51b815260206004820152602360248201527f496e76616c69642063616d706169676e2073746174757320666f72207265667560448201526237321760e91b6064820152608401610345565b6000828152600760205260408120905b8154811015610ebf576000828281548110610d5957610d5961121b565b60009182526020808320909101548783526006825260408084206001600160a01b03909216808552919092529120549091508015610eaa5760006064610da0836062611255565b610daa91906111e0565b60008881526006602090815260408083206001600160a01b038816808552925280832083905551929350909183908381818185875af1925050503d8060008114610e10576040519150601f19603f3d011682016040523d82523d6000602084013e610e15565b606091505b5050905080610e5e5760405162461bcd60e51b815260206004820152601560248201527419985a5b1959081d1bc81cd95b99081c99599d5b99605a1b6044820152606401610345565b604080518981526001600160a01b03861660208201529081018390527f7a482fdeb6bc9a1376f597068a214a7a39472bb2eff1b8cad21ba04f49ddca1b9060600160405180910390a150505b50508080610eb790611202565b915050610d3c565b50600260038084015460ff1690811115610edb57610edb610fe2565b14610f1a5760038201805460ff19166002908117909155604051849160008051602061126d83398151915291610f119190611177565b60405180910390a25b505050565b6000546001600160a01b031633146107605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610345565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610fdb57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061100857611008610fe2565b9052565b8481526001600160a01b038416602082015260408101839052608081016110366060830184610ff8565b95945050505050565b80356001600160a01b038116811461105657600080fd5b919050565b6000806040838503121561106e57600080fd5b8235915061107e6020840161103f565b90509250929050565b60008060006060848603121561109c57600080fd5b6110a58461103f565b95602085013595506040909401359392505050565b600080604083850312156110cd57600080fd5b50508035926020909101359150565b6000602082840312156110ee57600080fd5b6110f78261103f565b9392505050565b6020808252601d908201527f43616c6c6572206973206e6f74207468652044414f206163636f756e74000000604082015260600190565b60208082526022908201527f43616d706169676e206d7573742062652070656e64696e6720617070726f7661604082015261361760f11b606082015260800190565b602081016108678284610ff8565b60208082526018908201527721b0b6b830b4b3b71036bab9ba1031329030b1ba34bb329760411b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610867576108676111b7565b6000826111fd57634e487b7160e01b600052601260045260246000fd5b500490565b600060018201611214576112146111b7565b5060010190565b634e487b7160e01b600052603260045260246000fd5b828152604081016003831061124857611248610fe2565b8260208301529392505050565b8082028115828204841417610867576108676111b756fe7e5e6bfcab605d9254dbb5c3b4c8bd65ee4705bb30b1fc434d9651d24d368f36a26469706673582212205accac20b9a361399615947aea6df58fd9a990b3ae4ec2d9d2e3032fed42469764736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100c85760003560e01c8063715018a61161007a578063715018a6146102285780638da5cb5b1461023d5780639453fdc41461025b578063965afa891461027b578063dbaf09101461029b578063ee4e1b53146102bb578063f2fde38b146102db578063f44ceee7146102fb57600080fd5b8063034d09da146100cd5780630b7ef89b146100ef578063141961bc146101025780632131c68c1461016a57806322c59958146101a257806328928b90146101e8578063461b600414610208575b600080fd5b3480156100d957600080fd5b506100ed6100e8366004610fc9565b61031b565b005b6100ed6100fd366004610fc9565b6103cd565b34801561010e57600080fd5b5061015161011d366004610fc9565b600560205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169160ff1684565b604051610161949392919061100c565b60405180910390f35b34801561017657600080fd5b5060045461018a906001600160a01b031681565b6040516001600160a01b039091168152602001610161565b3480156101ae57600080fd5b506101da6101bd36600461105b565b600660209081526000928352604080842090915290825290205481565b604051908152602001610161565b3480156101f457600080fd5b5060035461018a906001600160a01b031681565b34801561021457600080fd5b506100ed610223366004611087565b6104d4565b34801561023457600080fd5b506100ed61074e565b34801561024957600080fd5b506000546001600160a01b031661018a565b34801561026757600080fd5b506101da6102763660046110ba565b610762565b34801561028757600080fd5b506100ed6102963660046110dc565b61086d565b3480156102a757600080fd5b506100ed6102b63660046110ba565b6108fc565b3480156102c757600080fd5b506100ed6102d6366004610fc9565b610b38565b3480156102e757600080fd5b506100ed6102f63660046110dc565b610bd8565b34801561030757600080fd5b506100ed610316366004610fc9565b610c51565b6004546001600160a01b0316331461034e5760405162461bcd60e51b8152600401610345906110fe565b60405180910390fd5b60008181526005602052604081209060038083015460ff169081111561037657610376610fe2565b146103935760405162461bcd60e51b815260040161034590611135565b6003818101805460ff191682179055604051839160008051602061126d833981519152916103c19190611177565b60405180910390a25050565b6000818152600560205260409020600160038083015460ff16908111156103f6576103f6610fe2565b146104135760405162461bcd60e51b815260040161034590611185565b600034116104735760405162461bcd60e51b815260206004820152602760248201527f436f6e747269627574696f6e206d75737420626520677265617465722074686160448201526637103d32b9379760c91b6064820152608401610345565b336000908152600582016020526040812080543492906104949084906111cd565b9091555050604051348152829033907fd2dff949d20e874cc6ba1dcefb840fb8cf6000a4197bfb69accfea5a32443ff59060200160405180910390a35050565b6004546001600160a01b031633146104fe5760405162461bcd60e51b8152600401610345906110fe565b6001600160a01b0383166105645760405162461bcd60e51b815260206004820152602760248201527f42656e65666963696172792063616e6e6f7420626520746865207a65726f206160448201526632323932b9b99760c91b6064820152608401610345565b600082116105c45760405162461bcd60e51b815260206004820152602760248201527f546f74616c20616d6f756e74206d75737420626520677265617465722074686160448201526637103d32b9379760c91b6064820152608401610345565b600081116106145760405162461bcd60e51b815260206004820181905260248201527f4174206c65617374206f6e65206d696c6573746f6e652072657175697265642e6044820152606401610345565b610622600180546001019055565b600061062d60015490565b60008181526005602052604081208281556001810180546001600160a01b0319166001600160a01b0389161790556002810186905560038101805460ff191690559192505b8381101561070257816004016040518060400160405280868861069591906111e0565b8152602001600090528154600181810184556000938452602093849020835160029384029091019081559383015184820180549495949193909260ff19909216919084908111156106e8576106e8610fe2565b0217905550505080806106fa90611202565b915050610672565b50846001600160a01b0316827f63e3678c8493a16f8ba43ae9e547231762ca04526dac2c388bd2c26d894018518660405161073f91815260200190565b60405180910390a35050505050565b610756610f1f565b6107606000610f79565b565b600082815260056020526040812081805b6000868152600760205260409020548110156107f35760008681526007602052604081208054839081106107a9576107a961121b565b60009182526020808320909101546001600160a01b0316808352600587019091526040909120549091506107dd90846111cd565b92505080806107eb90611202565b915050610773565b508160040184815481106108095761080961121b565b9060005260206000209060020201600001548110156108635760405162461bcd60e51b815260206004820152601660248201527526b4b632b9ba37b732903737ba103932b0b1b432b21760511b6044820152606401610345565b9150505b92915050565b610875610f1f565b6001600160a01b0381166108da5760405162461bcd60e51b815260206004820152602660248201527f44414f20616464726573732063616e6e6f7420626520746865207a65726f206160448201526564647265737360d01b6064820152608401610345565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146109265760405162461bcd60e51b8152600401610345906110fe565b6000828152600560205260409020600160038083015460ff169081111561094f5761094f610fe2565b1461096c5760405162461bcd60e51b815260040161034590611185565b60008160040183815481106109835761098361121b565b6000918252602082206002909102019150600182015460ff1660028111156109ad576109ad610fe2565b146109fa5760405162461bcd60e51b815260206004820152601a60248201527f4d696c6573746f6e65206d7573742062652070656e64696e672e0000000000006044820152606401610345565b600182015481546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610a37573d6000803e3d6000fd5b506001818101805460ff19168217905560405185917fbec752a593d8ddbe45792918310a70eaa90968426e352c981df882c16b81124c91610a79918791611231565b60405180910390a2600160005b6004840154811015610af0576001846004018281548110610aa957610aa961121b565b600091825260209091206002918202016001015460ff1690811115610ad057610ad0610fe2565b14610ade5760009150610af0565b80610ae881611202565b915050610a86565b508015610b315760038301805460ff19166002908117909155604051869160008051602061126d83398151915291610b289190611177565b60405180910390a25b5050505050565b6004546001600160a01b03163314610b625760405162461bcd60e51b8152600401610345906110fe565b60008181526005602052604081209060038083015460ff1690811115610b8a57610b8a610fe2565b14610ba75760405162461bcd60e51b815260040161034590611135565b60038101805460ff19166001908117909155604051839160008051602061126d833981519152916103c19190611177565b610be0610f1f565b6001600160a01b038116610c455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610345565b610c4e81610f79565b50565b6004546001600160a01b03163314610c7b5760405162461bcd60e51b8152600401610345906110fe565b600081815260056020526040902060038082015460ff1681811115610ca257610ca2610fe2565b1480610cd45750600260038083015460ff1690811115610cc457610cc4610fe2565b148015610cd45750478160020154115b610d2c5760405162461bcd60e51b815260206004820152602360248201527f496e76616c69642063616d706169676e2073746174757320666f72207265667560448201526237321760e91b6064820152608401610345565b6000828152600760205260408120905b8154811015610ebf576000828281548110610d5957610d5961121b565b60009182526020808320909101548783526006825260408084206001600160a01b03909216808552919092529120549091508015610eaa5760006064610da0836062611255565b610daa91906111e0565b60008881526006602090815260408083206001600160a01b038816808552925280832083905551929350909183908381818185875af1925050503d8060008114610e10576040519150601f19603f3d011682016040523d82523d6000602084013e610e15565b606091505b5050905080610e5e5760405162461bcd60e51b815260206004820152601560248201527419985a5b1959081d1bc81cd95b99081c99599d5b99605a1b6044820152606401610345565b604080518981526001600160a01b03861660208201529081018390527f7a482fdeb6bc9a1376f597068a214a7a39472bb2eff1b8cad21ba04f49ddca1b9060600160405180910390a150505b50508080610eb790611202565b915050610d3c565b50600260038084015460ff1690811115610edb57610edb610fe2565b14610f1a5760038201805460ff19166002908117909155604051849160008051602061126d83398151915291610f119190611177565b60405180910390a25b505050565b6000546001600160a01b031633146107605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610345565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610fdb57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061100857611008610fe2565b9052565b8481526001600160a01b038416602082015260408101839052608081016110366060830184610ff8565b95945050505050565b80356001600160a01b038116811461105657600080fd5b919050565b6000806040838503121561106e57600080fd5b8235915061107e6020840161103f565b90509250929050565b60008060006060848603121561109c57600080fd5b6110a58461103f565b95602085013595506040909401359392505050565b600080604083850312156110cd57600080fd5b50508035926020909101359150565b6000602082840312156110ee57600080fd5b6110f78261103f565b9392505050565b6020808252601d908201527f43616c6c6572206973206e6f74207468652044414f206163636f756e74000000604082015260600190565b60208082526022908201527f43616d706169676e206d7573742062652070656e64696e6720617070726f7661604082015261361760f11b606082015260800190565b602081016108678284610ff8565b60208082526018908201527721b0b6b830b4b3b71036bab9ba1031329030b1ba34bb329760411b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610867576108676111b7565b6000826111fd57634e487b7160e01b600052601260045260246000fd5b500490565b600060018201611214576112146111b7565b5060010190565b634e487b7160e01b600052603260045260246000fd5b828152604081016003831061124857611248610fe2565b8260208301529392505050565b8082028115828204841417610867576108676111b756fe7e5e6bfcab605d9254dbb5c3b4c8bd65ee4705bb30b1fc434d9651d24d368f36a26469706673582212205accac20b9a361399615947aea6df58fd9a990b3ae4ec2d9d2e3032fed42469764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12478,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_campaignIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)8338_storage"
      },
      {
        "astId": 12481,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_itemIdCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)8338_storage"
      },
      {
        "astId": 12516,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "escAccount",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12518,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "daoAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12523,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "campaigns",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Campaign)12514_storage)"
      },
      {
        "astId": 12529,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "campaignContributions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 12534,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "campaignContributors",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Milestone)12496_storage)dyn_storage": {
        "base": "t_struct(Milestone)12496_storage",
        "encoding": "dynamic_array",
        "label": "struct Escrow.Milestone[]",
        "numberOfBytes": "32"
      },
      "t_enum(CampaignStatus)12486": {
        "encoding": "inplace",
        "label": "enum Escrow.CampaignStatus",
        "numberOfBytes": "1"
      },
      "t_enum(MilestoneStatus)12490": {
        "encoding": "inplace",
        "label": "enum Escrow.MilestoneStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Campaign)12514_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Escrow.Campaign)",
        "numberOfBytes": "32",
        "value": "t_struct(Campaign)12514_storage"
      },
      "t_struct(Campaign)12514_storage": {
        "encoding": "inplace",
        "label": "struct Escrow.Campaign",
        "members": [
          {
            "astId": 12498,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12500,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "beneficiary",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12502,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "totalAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12505,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(CampaignStatus)12486"
          },
          {
            "astId": 12509,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "milestones",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(Milestone)12496_storage)dyn_storage"
          },
          {
            "astId": 12513,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "contributions",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Counter)8338_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 8337,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Milestone)12496_storage": {
        "encoding": "inplace",
        "label": "struct Escrow.Milestone",
        "members": [
          {
            "astId": 12492,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12495,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(MilestoneStatus)12490"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}